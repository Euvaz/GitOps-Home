apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
  name: cilium
  namespace: kube-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
  name: cilium-operator
  namespace: kube-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
  name: hubble-relay
  namespace: kube-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
  name: hubble-ui
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: cilium
  name: cilium-config-agent
  namespace: kube-system
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: cilium
  name: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - namespaces
  - services
  - pods
  - endpoints
  - nodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - watch
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  - ciliumbgppeeringpolicies
  - ciliumclusterwideenvoyconfigs
  - ciliumclusterwidenetworkpolicies
  - ciliumegressgatewaypolicies
  - ciliumendpoints
  - ciliumendpointslices
  - ciliumenvoyconfigs
  - ciliumidentities
  - ciliumlocalredirectpolicies
  - ciliumnetworkpolicies
  - ciliumnodes
  - ciliumnodeconfigs
  verbs:
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  - ciliumendpoints
  - ciliumnodes
  verbs:
  - create
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  verbs:
  - delete
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  - ciliumnodes/status
  verbs:
  - get
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/status
  - ciliumendpoints/status
  - ciliumendpoints
  verbs:
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: cilium
  name: cilium-operator
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
  - delete
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - nodes
  - nodes/status
  verbs:
  - patch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - services/status
  verbs:
  - update
  - patch
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - services
  - endpoints
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies
  - ciliumclusterwidenetworkpolicies
  verbs:
  - create
  - update
  - deletecollection
  - patch
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/status
  verbs:
  - patch
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  - ciliumidentities
  verbs:
  - delete
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  verbs:
  - create
  - update
  - get
  - list
  - watch
  - delete
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes/status
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpointslices
  - ciliumenvoyconfigs
  verbs:
  - create
  - update
  - get
  - list
  - watch
  - delete
  - patch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - create
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resourceNames:
  - ciliumloadbalancerippools.cilium.io
  - ciliumbgppeeringpolicies.cilium.io
  - ciliumclusterwideenvoyconfigs.cilium.io
  - ciliumclusterwidenetworkpolicies.cilium.io
  - ciliumegressgatewaypolicies.cilium.io
  - ciliumendpoints.cilium.io
  - ciliumendpointslices.cilium.io
  - ciliumenvoyconfigs.cilium.io
  - ciliumexternalworkloads.cilium.io
  - ciliumidentities.cilium.io
  - ciliumlocalredirectpolicies.cilium.io
  - ciliumnetworkpolicies.cilium.io
  - ciliumnodes.cilium.io
  - ciliumnodeconfigs.cilium.io
  resources:
  - customresourcedefinitions
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools/status
  verbs:
  - patch
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - create
  - get
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: cilium
  name: hubble-ui
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - componentstatuses
  - endpoints
  - namespaces
  - nodes
  - pods
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - '*'
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: cilium
  name: cilium-config-agent
  namespace: kube-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cilium-config-agent
subjects:
- kind: ServiceAccount
  name: cilium
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: cilium
  name: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium
subjects:
- kind: ServiceAccount
  name: cilium
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: cilium
  name: cilium-operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium-operator
subjects:
- kind: ServiceAccount
  name: cilium-operator
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: cilium
  name: hubble-ui
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: hubble-ui
subjects:
- kind: ServiceAccount
  name: hubble-ui
  namespace: kube-system
---
apiVersion: v1
data:
  agent-not-ready-taint-key: node.cilium.io/agent-not-ready
  arping-refresh-period: 30s
  auto-direct-node-routes: "true"
  bpf-lb-algorithm: maglev
  bpf-lb-external-clusterip: "false"
  bpf-lb-map-max: "65536"
  bpf-lb-mode: hybrid
  bpf-lb-sock: "false"
  bpf-map-dynamic-size-ratio: "0.0025"
  bpf-policy-map-max: "16384"
  bpf-root: /sys/fs/bpf
  cgroup-root: /sys/fs/cgroup
  cilium-endpoint-gc-interval: 5m0s
  cluster-id: "1"
  cluster-name: kubernetes-home
  cni-uninstall: "true"
  custom-cni-conf: "false"
  debug: "false"
  disable-cnp-status-updates: "true"
  disable-endpoint-crd: "false"
  enable-auto-protect-node-port-range: "true"
  enable-bgp-control-plane: "false"
  enable-bpf-clock-probe: "true"
  enable-endpoint-health-checking: "true"
  enable-endpoint-routes: "true"
  enable-health-check-nodeport: "true"
  enable-health-checking: "true"
  enable-hubble: "true"
  enable-hubble-open-metrics: "true"
  enable-ipv4: "true"
  enable-ipv4-masquerade: "true"
  enable-ipv6: "false"
  enable-ipv6-big-tcp: "false"
  enable-ipv6-masquerade: "true"
  enable-k8s-terminating-endpoint: "true"
  enable-l2-neigh-discovery: "true"
  enable-l7-proxy: "true"
  enable-local-redirect-policy: "false"
  enable-metrics: "true"
  enable-policy: default
  enable-remote-node-identity: "true"
  enable-sctp: "false"
  enable-svc-source-range-check: "true"
  enable-vtep: "false"
  enable-well-known-identities: "false"
  enable-xt-socket-fallback: "true"
  hubble-disable-tls: "false"
  hubble-listen-address: :4244
  hubble-metrics: null
  hubble-metrics-server: :9965
  hubble-socket-path: /var/run/cilium/hubble.sock
  hubble-tls-cert-file: /var/lib/cilium/tls/hubble/server.crt
  hubble-tls-client-ca-files: /var/lib/cilium/tls/hubble/client-ca.crt
  hubble-tls-key-file: /var/lib/cilium/tls/hubble/server.key
  identity-allocation-mode: crd
  identity-gc-interval: 15m0s
  identity-heartbeat-timeout: 30m0s
  install-no-conntrack-iptables-rules: "false"
  ipam: kubernetes
  ipv4-native-routing-cidr: 10.244.0.0/16
  kube-proxy-replacement: strict
  kube-proxy-replacement-healthz-bind-address: 0.0.0.0:10256
  monitor-aggregation: medium
  monitor-aggregation-flags: all
  monitor-aggregation-interval: 5s
  node-port-bind-protection: "true"
  nodes-gc-interval: 5m0s
  operator-api-serve-addr: 127.0.0.1:9234
  operator-prometheus-serve-addr: :9963
  preallocate-bpf-maps: "false"
  procfs: /host/proc
  prometheus-serve-addr: :9962
  proxy-prometheus-port: "9964"
  remove-cilium-node-taints: "true"
  set-cilium-is-up-condition: "true"
  sidecar-istio-proxy-image: cilium/istio_proxy
  skip-cnp-status-startup-clean: "false"
  synchronize-k8s-nodes: "true"
  tofqdns-dns-reject-response-code: refused
  tofqdns-enable-dns-compression: "true"
  tofqdns-endpoint-max-ip-per-hostname: "50"
  tofqdns-idle-connection-grace-period: 0s
  tofqdns-max-deferred-connection-deletes: "10000"
  tofqdns-min-ttl: "3600"
  tofqdns-proxy-response-max-delay: 100ms
  tunnel: disabled
  unmanaged-pod-watcher-interval: "15"
  vtep-cidr: ""
  vtep-endpoint: ""
  vtep-mac: ""
  vtep-mask: ""
kind: ConfigMap
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
  name: cilium-config
  namespace: kube-system
---
apiVersion: v1
data:
  hubble-l7-http-metrics-by-workload.json: |
    {
      "__inputs": [],
      "__elements": {},
      "__requires": [
        {
          "type": "grafana",
          "id": "grafana",
          "name": "Grafana",
          "version": "9.0.5"
        },
        {
          "type": "datasource",
          "id": "prometheus",
          "name": "Prometheus",
          "version": "1.0.0"
        },
        {
          "type": "panel",
          "id": "stat",
          "name": "Stat",
          "version": ""
        },
        {
          "type": "panel",
          "id": "timeseries",
          "name": "Time series",
          "version": ""
        }
      ],
      "annotations": {
        "list": [
          {
            "builtIn": 1,
            "datasource": {
              "type": "grafana",
              "uid": "-- Grafana --"
            },
            "enable": true,
            "hide": true,
            "iconColor": "rgba(0, 211, 255, 1)",
            "name": "Annotations & Alerts",
            "target": {
              "limit": 100,
              "matchAny": false,
              "tags": [],
              "type": "dashboard"
            },
            "type": "dashboard"
          }
        ]
      },
      "editable": true,
      "fiscalYearStartMonth": 0,
      "graphTooltip": 1,
      "id": null,
      "links": [],
      "liveNow": false,
      "panels": [
        {
          "collapsed": false,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 0
          },
          "id": 14,
          "panels": [],
          "title": "General",
          "type": "row"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_PROMETHEUS}"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "thresholds"
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "reqps"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 5,
            "w": 8,
            "x": 0,
            "y": 1
          },
          "id": 16,
          "options": {
            "colorMode": "value",
            "graphMode": "area",
            "justifyMode": "auto",
            "orientation": "auto",
            "reduceOptions": {
              "calcs": [
                "lastNotNull"
              ],
              "fields": "",
              "values": false
            },
            "textMode": "auto"
          },
          "pluginVersion": "9.0.5",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "${DS_PROMETHEUS}"
              },
              "expr": "round(sum(rate(hubble_http_requests_total{reporter=~\"${reporter}\", destination_namespace=~\"${destination_namespace}\", destination_workload=~\"${destination_workload}\"}[$__rate_interval])), 0.001)",
              "refId": "A"
            }
          ],
          "title": "Incoming Request Volume",
          "type": "stat"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_PROMETHEUS}"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "thresholds"
              },
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "percentunit"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 5,
            "w": 8,
            "x": 8,
            "y": 1
          },
          "id": 17,
          "options": {
            "colorMode": "value",
            "graphMode": "area",
            "justifyMode": "auto",
            "orientation": "auto",
            "reduceOptions": {
              "calcs": [
                "lastNotNull"
              ],
              "fields": "",
              "values": false
            },
            "textMode": "auto"
          },
          "pluginVersion": "9.0.5",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "${DS_PROMETHEUS}"
              },
              "editorMode": "code",
              "exemplar": false,
              "expr": "sum(rate(hubble_http_requests_total{cluster=~\"${cluster}\", destination_namespace=~\"${destination_namespace}\", destination_workload=~\"${destination_workload}\", reporter=\"${reporter}\", status!~\"5.*\"}[$__rate_interval]))\n/\nsum(rate(hubble_http_requests_total{cluster=~\"${cluster}\", destination_namespace=~\"${destination_namespace}\", destination_workload=~\"${destination_workload}\", reporter=\"${reporter}\"}[$__rate_interval]))",
              "interval": "",
              "legendFormat": "{{ cluster }} {{ method }} {{ source_namespace }}/{{ source_workload }}",
              "range": true,
              "refId": "A"
            }
          ],
          "title": "Incoming Request Success Rate (non-5xx responses)",
          "type": "stat"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_PROMETHEUS}"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "s"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 5,
            "w": 8,
            "x": 16,
            "y": 1
          },
          "id": 18,
          "options": {
            "legend": {
              "calcs": [
                "lastNotNull"
              ],
              "displayMode": "list",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "pluginVersion": "9.0.5",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "${DS_PROMETHEUS}"
              },
              "editorMode": "code",
              "exemplar": false,
              "expr": "histogram_quantile(0.50, sum(rate(hubble_http_request_duration_seconds_bucket{cluster=~\"${cluster}\", destination_namespace=~\"${destination_namespace}\", destination_workload=~\"${destination_workload}\", reporter=\"${reporter}\"}[$__rate_interval])) by (le))",
              "interval": "",
              "legendFormat": "P50",
              "range": true,
              "refId": "A"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "${DS_PROMETHEUS}"
              },
              "editorMode": "code",
              "exemplar": false,
              "expr": "histogram_quantile(0.95, sum(rate(hubble_http_request_duration_seconds_bucket{cluster=~\"${cluster}\", destination_namespace=~\"${destination_namespace}\", destination_workload=~\"${destination_workload}\", reporter=\"${reporter}\"}[$__rate_interval])) by (le))",
              "hide": false,
              "interval": "",
              "legendFormat": "P95",
              "range": true,
              "refId": "B"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "${DS_PROMETHEUS}"
              },
              "editorMode": "code",
              "exemplar": false,
              "expr": "histogram_quantile(0.99, sum(rate(hubble_http_request_duration_seconds_bucket{cluster=~\"${cluster}\", destination_namespace=~\"${destination_namespace}\", destination_workload=~\"${destination_workload}\", reporter=\"${reporter}\"}[$__rate_interval])) by (le))",
              "hide": false,
              "interval": "",
              "legendFormat": "P99",
              "range": true,
              "refId": "C"
            }
          ],
          "title": "Request Duration",
          "type": "timeseries"
        },
        {
          "collapsed": false,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 6
          },
          "id": 6,
          "panels": [],
          "title": "Requests by Source",
          "type": "row"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_PROMETHEUS}"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "reqps"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 0,
            "y": 7
          },
          "id": 3,
          "options": {
            "legend": {
              "calcs": [
                "max",
                "mean",
                "sum",
                "lastNotNull"
              ],
              "displayMode": "table",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "${DS_PROMETHEUS}"
              },
              "editorMode": "code",
              "exemplar": false,
              "expr": "round(sum(rate(hubble_http_requests_total{cluster=~\"${cluster}\", destination_namespace=~\"${destination_namespace}\", destination_workload=~\"${destination_workload}\", reporter=\"${reporter}\", source_namespace=~\"${source_namespace}\", source_workload=~\"${source_workload}\"}[$__rate_interval])) by (cluster, source_namespace, source_workload, status), 0.001)",
              "interval": "",
              "legendFormat": "{{ cluster }} {{ method }} {{ source_namespace }}/{{ source_workload }}: {{ status }}",
              "range": true,
              "refId": "A"
            }
          ],
          "title": "Incoming Requests by Source and Response Code",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_PROMETHEUS}"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "percentunit"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 12,
            "y": 7
          },
          "id": 7,
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "min",
                "max",
                "lastNotNull"
              ],
              "displayMode": "table",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "${DS_PROMETHEUS}"
              },
              "editorMode": "code",
              "exemplar": false,
              "expr": "sum(rate(hubble_http_requests_total{cluster=~\"${cluster}\", destination_namespace=~\"${destination_namespace}\", destination_workload=~\"${destination_workload}\", reporter=\"${reporter}\", source_namespace=~\"${source_namespace}\", source_workload=~\"${source_workload}\",status!~\"5.*\"}[$__rate_interval])) by (cluster, source_namespace, source_workload)\n/\nsum(rate(hubble_http_requests_total{cluster=~\"${cluster}\", destination_namespace=~\"${destination_namespace}\", destination_workload=~\"${destination_workload}\", reporter=\"${reporter}\", source_namespace=~\"${source_namespace}\", source_workload=~\"${source_workload}\"}[$__rate_interval])) by (cluster, source_namespace, source_workload)",
              "interval": "",
              "legendFormat": "{{ cluster }} {{ method }} {{ source_namespace }}/{{ source_workload }}",
              "range": true,
              "refId": "A"
            }
          ],
          "title": "Incoming Request Success Rate (non-5xx responses) By Source",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_PROMETHEUS}"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "s"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 0,
            "y": 17
          },
          "id": 4,
          "options": {
            "legend": {
              "calcs": [
                "min",
                "max",
                "mean",
                "lastNotNull"
              ],
              "displayMode": "table",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "${DS_PROMETHEUS}"
              },
              "editorMode": "code",
              "exemplar": true,
              "expr": "histogram_quantile(0.50, sum(rate(hubble_http_request_duration_seconds_bucket{cluster=~\"${cluster}\", destination_namespace=~\"${destination_namespace}\", destination_workload=~\"${destination_workload}\", reporter=\"${reporter}\", source_namespace=~\"${source_namespace}\", source_workload=~\"${source_workload}\"}[$__rate_interval])) by (cluster, source_namespace, source_workload, le))",
              "interval": "",
              "legendFormat": "{{ cluster }} {{ source_namespace }}/{{ source_workload }} P50",
              "range": true,
              "refId": "A"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "${DS_PROMETHEUS}"
              },
              "editorMode": "code",
              "exemplar": true,
              "expr": "histogram_quantile(0.95, sum(rate(hubble_http_request_duration_seconds_bucket{cluster=~\"${cluster}\", destination_namespace=~\"${destination_namespace}\", destination_workload=~\"${destination_workload}\", reporter=\"${reporter}\", source_namespace=~\"${source_namespace}\", source_workload=~\"${source_workload}\"}[$__rate_interval])) by (cluster, source_namespace, source_workload, le))",
              "hide": false,
              "interval": "",
              "legendFormat": "{{ cluster }} {{ source_namespace }}/{{ source_workload }} P95",
              "range": true,
              "refId": "B"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "${DS_PROMETHEUS}"
              },
              "editorMode": "code",
              "exemplar": true,
              "expr": "histogram_quantile(0.99, sum(rate(hubble_http_request_duration_seconds_bucket{cluster=~\"${cluster}\", destination_namespace=~\"${destination_namespace}\", destination_workload=~\"${destination_workload}\", reporter=\"${reporter}\", source_namespace=~\"${source_namespace}\", source_workload=~\"${source_workload}\"}[$__rate_interval])) by (cluster, source_namespace, source_workload, le))",
              "hide": false,
              "interval": "",
              "legendFormat": "{{ cluster }} {{ source_namespace }}/{{ source_workload }} P99",
              "range": true,
              "refId": "C"
            }
          ],
          "title": "HTTP Request Duration by Source",
          "type": "timeseries"
        },
        {
          "collapsed": false,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 27
          },
          "id": 9,
          "panels": [],
          "title": "Requests by Destination",
          "type": "row"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_PROMETHEUS}"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "reqps"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 0,
            "y": 28
          },
          "id": 10,
          "options": {
            "legend": {
              "calcs": [
                "max",
                "mean",
                "sum",
                "lastNotNull"
              ],
              "displayMode": "table",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "${DS_PROMETHEUS}"
              },
              "editorMode": "code",
              "exemplar": false,
              "expr": "round(sum(rate(hubble_http_requests_total{cluster=~\"${cluster}\", destination_namespace=~\"${destination_namespace}\", destination_workload=~\"${destination_workload}\", reporter=\"${reporter}\", source_namespace=~\"${source_namespace}\", source_workload=~\"${source_workload}\"}[$__rate_interval])) by (cluster, destination_namespace, destination_workload, status), 0.001)",
              "interval": "",
              "legendFormat": "{{ cluster }} {{ method }} {{ destination_namespace }}/{{ destination_workload }}: {{ status }}",
              "range": true,
              "refId": "A"
            }
          ],
          "title": "Incoming Requests by Destination and Response Code",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_PROMETHEUS}"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "percentunit"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 12,
            "y": 28
          },
          "id": 11,
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "min",
                "max",
                "lastNotNull"
              ],
              "displayMode": "table",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "${DS_PROMETHEUS}"
              },
              "editorMode": "code",
              "exemplar": false,
              "expr": "sum(rate(hubble_http_requests_total{cluster=~\"${cluster}\", destination_namespace=~\"${destination_namespace}\", destination_workload=~\"${destination_workload}\", reporter=\"${reporter}\", source_namespace=~\"${source_namespace}\", source_workload=~\"${source_workload}\",status!~\"5.*\"}[$__rate_interval])) by (cluster, destination_namespace, destination_workload)\n/\nsum(rate(hubble_http_requests_total{cluster=~\"${cluster}\", destination_namespace=~\"${destination_namespace}\", destination_workload=~\"${destination_workload}\", reporter=\"${reporter}\", source_namespace=~\"${source_namespace}\", source_workload=~\"${source_workload}\"}[$__rate_interval])) by (cluster, destination_namespace, destination_workload)",
              "interval": "",
              "legendFormat": "{{ cluster }} {{ method }} {{ destination_namespace }}/{{ destination_workload }}",
              "range": true,
              "refId": "A"
            }
          ],
          "title": "Incoming Request Success Rate (non-5xx responses) By Destination",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_PROMETHEUS}"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "s"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 0,
            "y": 38
          },
          "id": 12,
          "options": {
            "legend": {
              "calcs": [
                "min",
                "max",
                "mean",
                "lastNotNull"
              ],
              "displayMode": "table",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "${DS_PROMETHEUS}"
              },
              "editorMode": "code",
              "exemplar": true,
              "expr": "histogram_quantile(0.50, sum(rate(hubble_http_request_duration_seconds_bucket{cluster=~\"${cluster}\", destination_namespace=~\"${destination_namespace}\", destination_workload=~\"${destination_workload}\", reporter=\"${reporter}\", source_namespace=~\"${source_namespace}\", source_workload=~\"${source_workload}\"}[$__rate_interval])) by (cluster, destination_namespace, destination_workload, le))",
              "interval": "",
              "legendFormat": "{{ cluster }} {{ destination_namespace }}/{{ destination_workload }} P50",
              "range": true,
              "refId": "A"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "${DS_PROMETHEUS}"
              },
              "editorMode": "code",
              "exemplar": true,
              "expr": "histogram_quantile(0.95, sum(rate(hubble_http_request_duration_seconds_bucket{cluster=~\"${cluster}\", destination_namespace=~\"${destination_namespace}\", destination_workload=~\"${destination_workload}\", reporter=\"${reporter}\", source_namespace=~\"${source_namespace}\", source_workload=~\"${source_workload}\"}[$__rate_interval])) by (cluster, destination_namespace, destination_workload, le))",
              "hide": false,
              "interval": "",
              "legendFormat": "{{ cluster }} {{ destination_namespace }}/{{ destination_workload }} P95",
              "range": true,
              "refId": "B"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "${DS_PROMETHEUS}"
              },
              "editorMode": "code",
              "exemplar": true,
              "expr": "histogram_quantile(0.99, sum(rate(hubble_http_request_duration_seconds_bucket{cluster=~\"${cluster}\", destination_namespace=~\"${destination_namespace}\", destination_workload=~\"${destination_workload}\", reporter=\"${reporter}\", source_namespace=~\"${source_namespace}\", source_workload=~\"${source_workload}\"}[$__rate_interval])) by (cluster, destination_namespace, destination_workload, le))",
              "hide": false,
              "interval": "",
              "legendFormat": "{{ cluster }} {{ destination_namespace }}/{{ destination_workload }} P99",
              "range": true,
              "refId": "C"
            }
          ],
          "title": "HTTP Request Duration by Destination",
          "type": "timeseries"
        }
      ],
      "refresh": "30s",
      "schemaVersion": 36,
      "style": "dark",
      "tags": [],
      "templating": {
        "list": [
          {
            "current": {},
            "hide": 0,
            "includeAll": false,
            "label": "Prometheus",
            "multi": false,
            "name": "DS_PROMETHEUS",
            "options": [],
            "query": "prometheus",
            "queryValue": "",
            "refresh": 1,
            "regex": "",
            "skipUrlSync": false,
            "type": "datasource"
          },
          {
            "current": {},
            "datasource": {
              "type": "prometheus",
              "uid": "${DS_PROMETHEUS}"
            },
            "definition": "label_values(hubble_http_requests_total, cluster)",
            "hide": 0,
            "includeAll": false,
            "label": "Cluster",
            "multi": false,
            "name": "cluster",
            "options": [],
            "query": {
              "query": "label_values(hubble_http_requests_total, cluster)",
              "refId": "StandardVariableQuery"
            },
            "refresh": 1,
            "regex": "",
            "skipUrlSync": false,
            "sort": 2,
            "type": "query"
          },
          {
            "current": {},
            "datasource": {
              "type": "prometheus",
              "uid": "${DS_PROMETHEUS}"
            },
            "definition": "label_values(hubble_http_requests_total{cluster=~\"${cluster}\"}, destination_namespace)",
            "description": "",
            "hide": 0,
            "includeAll": false,
            "label": "Destination Namespace",
            "multi": false,
            "name": "destination_namespace",
            "options": [],
            "query": {
              "query": "label_values(hubble_http_requests_total{cluster=~\"${cluster}\"}, destination_namespace)",
              "refId": "StandardVariableQuery"
            },
            "refresh": 2,
            "regex": "",
            "skipUrlSync": false,
            "sort": 2,
            "type": "query"
          },
          {
            "current": {},
            "datasource": {
              "type": "prometheus",
              "uid": "${DS_PROMETHEUS}"
            },
            "definition": "label_values(hubble_http_requests_total{cluster=~\"${cluster}\", destination_namespace=~\"${destination_namespace}\"}, destination_workload)",
            "hide": 0,
            "includeAll": false,
            "label": "Destination Workload",
            "multi": false,
            "name": "destination_workload",
            "options": [],
            "query": {
              "query": "label_values(hubble_http_requests_total{cluster=~\"${cluster}\", destination_namespace=~\"${destination_namespace}\"}, destination_workload)",
              "refId": "StandardVariableQuery"
            },
            "refresh": 1,
            "regex": "",
            "skipUrlSync": false,
            "sort": 2,
            "type": "query"
          },
          {
            "current": {},
            "datasource": {
              "type": "prometheus",
              "uid": "${DS_PROMETHEUS}"
            },
            "definition": "label_values(hubble_http_requests_total, reporter)",
            "hide": 0,
            "includeAll": false,
            "label": "Reporter",
            "multi": false,
            "name": "reporter",
            "options": [],
            "query": {
              "query": "label_values(hubble_http_requests_total, reporter)",
              "refId": "StandardVariableQuery"
            },
            "refresh": 1,
            "regex": "",
            "skipUrlSync": false,
            "sort": 0,
            "type": "query"
          },
          {
            "current": {},
            "datasource": {
              "type": "prometheus",
              "uid": "${DS_PROMETHEUS}"
            },
            "definition": "label_values(hubble_http_requests_total{cluster=~\"${cluster}\", destination_namespace=~\"${destination_namespace}\", destination_workload=~\"${destination_workload}\"}, source_namespace)",
            "hide": 0,
            "includeAll": true,
            "label": "Source Namespace",
            "multi": true,
            "name": "source_namespace",
            "options": [],
            "query": {
              "query": "label_values(hubble_http_requests_total{cluster=~\"${cluster}\", destination_namespace=~\"${destination_namespace}\", destination_workload=~\"${destination_workload}\"}, source_namespace)",
              "refId": "StandardVariableQuery"
            },
            "refresh": 1,
            "regex": "",
            "skipUrlSync": false,
            "sort": 0,
            "type": "query"
          },
          {
            "current": {},
            "datasource": {
              "type": "prometheus",
              "uid": "${DS_PROMETHEUS}"
            },
            "definition": "label_values(hubble_http_requests_total{cluster=~\"${cluster}\", destination_namespace=~\"${destination_namespace}\", destination_workload=~\"${destination_workload}\", source_namespace=~\"${source_namespace}\"}, source_workload)",
            "hide": 0,
            "includeAll": true,
            "label": "Source Workload",
            "multi": true,
            "name": "source_workload",
            "options": [],
            "query": {
              "query": "label_values(hubble_http_requests_total{cluster=~\"${cluster}\", destination_namespace=~\"${destination_namespace}\", destination_workload=~\"${destination_workload}\", source_namespace=~\"${source_namespace}\"}, source_workload)",
              "refId": "StandardVariableQuery"
            },
            "refresh": 1,
            "regex": "",
            "skipUrlSync": false,
            "sort": 0,
            "type": "query"
          }
        ]
      },
      "time": {
        "from": "now-6h",
        "to": "now"
      },
      "timepicker": {},
      "timezone": "",
      "title": "Hubble L7 HTTP Metrics by Workload",
      "uid": "3g264CZVz",
      "version": 2,
      "weekStart": ""
    }
kind: ConfigMap
metadata:
  annotations:
    grafana_folder: Cilium
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: hubble
    app.kubernetes.io/part-of: cilium
    grafana_dashboard: "1"
    k8s-app: hubble
  name: hubble-l7-http-metrics-by-workload
  namespace: kube-system
---
apiVersion: v1
data:
  config.yaml: "cluster-name: kubernetes-home\npeer-service: \"hubble-peer.kube-system.svc.cluster.local:443\"\nlisten-address:
    :4245\nmetrics-listen-address: \":9966\"\ndial-timeout: \nretry-timeout: \nsort-buffer-len-max:
    \nsort-buffer-drain-timeout: \ntls-client-cert-file: /var/lib/hubble-relay/tls/client.crt\ntls-client-key-file:
    /var/lib/hubble-relay/tls/client.key\ntls-hubble-server-ca-files: /var/lib/hubble-relay/tls/hubble-server-ca.crt\ndisable-server-tls:
    true\n"
kind: ConfigMap
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
  name: hubble-relay-config
  namespace: kube-system
---
apiVersion: v1
data:
  nginx.conf: |-
    server {
        listen       8081;
        listen       [::]:8081;
        server_name  localhost;
        root /app;
        index index.html;
        client_max_body_size 1G;

        location / {
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;

            # CORS
            add_header Access-Control-Allow-Methods "GET, POST, PUT, HEAD, DELETE, OPTIONS";
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Max-Age 1728000;
            add_header Access-Control-Expose-Headers content-length,grpc-status,grpc-message;
            add_header Access-Control-Allow-Headers range,keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout;
            if ($request_method = OPTIONS) {
                return 204;
            }
            # /CORS

            location /api {
                proxy_http_version 1.1;
                proxy_pass_request_headers on;
                proxy_hide_header Access-Control-Allow-Origin;
                proxy_pass http://127.0.0.1:8090;
            }

            location / {
                try_files $uri $uri/ /index.html;
            }
        }
    }
kind: ConfigMap
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
  name: hubble-ui-nginx
  namespace: kube-system
---
apiVersion: v1
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQVBQck9sRGlNNnhDWEJtVEFtR0g1ZTR3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TURRd05qQXhOVGcwT0ZvWERUSTJNRFF3TlRBeApOVGcwT0Zvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUFwdmRkMEg3NURoWFVMV3NuZHV4N1h0M0VtZGlIODExUS9tUkUxVnRDL2pnMUNPVGIKdjZKWGxoYTY4Y3FZc1J4VytscjBuZzNSL2tkdjZkSmZJRHJhNmRDY0c0R2ZCT0Q4eGhobnFmM1FuRE1QV3d3cQpzT05FSDBVM3FWQjBtTXlYdm1qUk4yTWNxeGYra0UrWFpCL1Jqc2tSWWoyNFl2RjRIUTNGd3k0bEI2ZTRmNG80Cnhwc0FSZlN1bG5RdDRaV1ZweDYrcFZUNWN5Um1ybUJFQ01FZ0d6V3V3SGRCMnovMFVMMkROZnlUSW1lZE1oWWYKYVZ2NkZSZjduZTZhRktuWCtpNTVXZkVoK0IrWDlzM09uVjVrdVBNU2swWkFyR0FtRTZCaTRPNE5DTkp4OGl4awpJMjB2T09PU25FWW9TM05ZWHJVQkRyQzNPenEvSVFzbGRXTVhzd0lEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGQm9TRlJqM0d0NGFORmhzTnZkR2NoZXZQYXhjTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQjVOTW9VR1Fxd3p0SStMZkV5NUdJVXBha0JXWmNYYURmQ3M4WVdTWmhSUHlvTTZ2ekdITVdFCmFOQ1lKK2JkTTJmZ2hvdU1jZE5GZUVZTklDV2hPYmxuRThFQy9YQk1VZXJFd0hRTVpqQUwxcy9TNkVqcVV3ek4KVHNUZU03OUppTmpJMElTOFFERU9HbDVjanZpWWhVZWQ5eTcrZHhJa2FWK0JWWEcwWUtOVkJpL3JjenZiZVQxcApRTldqd1cvcVNsODR2eVk5Z2hDMU42RVFjL05HbDJaQ2ZtcENBdHRjbHRkMDc4eVBkOExEbEtTWU1aVS9iQVBPClpBSjZmVVc5NDdZQmd6T1owdmNWSGQyRTlxSjRxSXNVWmNDWEo3SWtmUmNvN1RVNFZ2T2NQdGxuU1Z6akN4RFEKbHU0RkZ1OEVZQTkwQ1Q2anN2RE5kQy83cDdqd3hDWFMKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  ca.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBcHZkZDBINzVEaFhVTFdzbmR1eDdYdDNFbWRpSDgxMVEvbVJFMVZ0Qy9qZzFDT1RiCnY2SlhsaGE2OGNxWXNSeFcrbHIwbmczUi9rZHY2ZEpmSURyYTZkQ2NHNEdmQk9EOHhoaG5xZjNRbkRNUFd3d3EKc09ORUgwVTNxVkIwbU15WHZtalJOMk1jcXhmK2tFK1haQi9SanNrUllqMjRZdkY0SFEzRnd5NGxCNmU0ZjRvNAp4cHNBUmZTdWxuUXQ0WldWcHg2K3BWVDVjeVJtcm1CRUNNRWdHeld1d0hkQjJ6LzBVTDJETmZ5VEltZWRNaFlmCmFWdjZGUmY3bmU2YUZLblgraTU1V2ZFaCtCK1g5czNPblY1a3VQTVNrMFpBckdBbUU2Qmk0TzROQ05KeDhpeGsKSTIwdk9PT1NuRVlvUzNOWVhyVUJEckMzT3pxL0lRc2xkV01Yc3dJREFRQUJBb0lCQVFDS0UyVWt4K3hFeHE2Sgp4T1NGQjNuYThRRGx6VmhZWEtKZlRpSlNZcjliSnJaTkhaM1FzM3RGSnBVQTRlODJBRjY1ZVVCeitLL2hYY2hpCkVGUVVmamVOUnJQaVYyWmZEWVJjZWRBNGx5ck9FYmV3THJhYlE4YVJLWmVuVUY2c0FmMjNQRTFRUllsdXdGQUgKblpwdjlaUkNSV3MzMkJ6RXpqWHJxUGtUdVBSc2grUXJwcXhxQzM2dkRYWDhJd3BkTVpOK0wyanVZcElYRjBzZApranNqTUlNYVVIZENZOGRLQjdtN0hZVFVEcUw1dkJVbVllVm01OXhrWWFnM1l4bkhwcmFlRzE4NmtlN29uWSthClIxZTJxQ2VGbEZEL1RGMFUrdHU3Tld6alZBeGFTQ0xKcjVCUnU5LzdIdXlyR282MVdwT25kVHBoNWNHdzhjNzMKMHNHam1FS3hBb0dCQU00YnhvbVkwL3BiUXhvS1c0VmtlNFVuUXdXNWs3ajVLOC90VTVQOHdoUDBuQUJjTVFwWApYTlR4aDNQdEErTVFuWW5GdUUrcUwxVW8xSGI0d050dEluNFR6SXMrUVowVnNQWjBXU2RtWDZqSDlKZ1k5aEZYCllUa3BzZytJNi83bEhJb0xmNWZOSHlmdVVMWFhBOUE5NWpoS0FnZlhHRklXaDNJSTBxcHlTWHFyQW9HQkFNOWkKQWdzeTVlenpVRHFEckpkamN0OWo1Nis2M1R5RkRpa0JCeUVtTjlkdjcxRFRDNHcwTVN6SVg4ckwwZU9DNzU1dAo0eC9GL1RwdUpWVUVrL0VaRWZFL0tUTDl5UGpJV3kydmFObGpUOGQ5MnNWTXk3akQvbXFxM2QwWjhqYk9yaTJKCkw0YW5qc1A0elAycU9JRjZnSnVrbUwxcGlCVUFRWlFQOWVRYWtsY1pBb0dBY1p3ejR4TGYvZ2VpUkU5alJYTXUKOXlXK053Q2xZZmZQWTZ6aFBoaThiajJPWkZCdEk5TW1NNmJ6VUQ1Y3Z5UWdncG4vVDhKeWx0R0wxQXlvV2d1ZApVTHZmS3YzbE13NkszajhpQ2FyUG5meWlZZGlZZ3RTVW5lclM0T2RMbHRSNTE4b2d5ZTlpZGlOU1QvbTJlMm96ClplRzluczY4OURyQTdHWGFvZU9maDBNQ2dZRUFzN2F5SUxSTjdpWDRXNHpxRHhNZVpCbzJsK0d1Z1JpbzZiMjcKU08zT3JJS1MrQTY3emhjWW1qOVdTKzZQQjhMYkZnY1NNT0dwalc0UUtmbmFucTlrRGhUM0JmcEpvOVkwdFlWeApyaGxTOUlUTEJmbUQvYXpURityVWN4dGQvRUxsVEE2N1FjeUllcWxzTTFMRXZ1ZkM5WjRRd3V2bUFwVURQMlVKCmFFL2lpMWtDZ1lFQWtIUSt3K0pESitpYnFjU1dPVUNrL2o4THpZSXZUbXhsSFNBT2ZxdStrVjVsTXMrVjBOaUsKZUNCQ0RNYWZEKytlY0hDRzJBb3RyYjhEQmdsbWFOR3V5cHlyakNVa0dVenNMbUpBV1psNWN1SldtN1JWcjladgpzbWYxVGdqbWF0dHExY1FFcmlkOC9BTzJ3Y096dUNySXZjQ1VVWGRoYmhqZlpuTlVhNzZEZHNvPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
kind: Secret
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
  name: cilium-ca
  namespace: kube-system
---
apiVersion: v1
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQVBQck9sRGlNNnhDWEJtVEFtR0g1ZTR3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TURRd05qQXhOVGcwT0ZvWERUSTJNRFF3TlRBeApOVGcwT0Zvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUFwdmRkMEg3NURoWFVMV3NuZHV4N1h0M0VtZGlIODExUS9tUkUxVnRDL2pnMUNPVGIKdjZKWGxoYTY4Y3FZc1J4VytscjBuZzNSL2tkdjZkSmZJRHJhNmRDY0c0R2ZCT0Q4eGhobnFmM1FuRE1QV3d3cQpzT05FSDBVM3FWQjBtTXlYdm1qUk4yTWNxeGYra0UrWFpCL1Jqc2tSWWoyNFl2RjRIUTNGd3k0bEI2ZTRmNG80Cnhwc0FSZlN1bG5RdDRaV1ZweDYrcFZUNWN5Um1ybUJFQ01FZ0d6V3V3SGRCMnovMFVMMkROZnlUSW1lZE1oWWYKYVZ2NkZSZjduZTZhRktuWCtpNTVXZkVoK0IrWDlzM09uVjVrdVBNU2swWkFyR0FtRTZCaTRPNE5DTkp4OGl4awpJMjB2T09PU25FWW9TM05ZWHJVQkRyQzNPenEvSVFzbGRXTVhzd0lEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGQm9TRlJqM0d0NGFORmhzTnZkR2NoZXZQYXhjTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQjVOTW9VR1Fxd3p0SStMZkV5NUdJVXBha0JXWmNYYURmQ3M4WVdTWmhSUHlvTTZ2ekdITVdFCmFOQ1lKK2JkTTJmZ2hvdU1jZE5GZUVZTklDV2hPYmxuRThFQy9YQk1VZXJFd0hRTVpqQUwxcy9TNkVqcVV3ek4KVHNUZU03OUppTmpJMElTOFFERU9HbDVjanZpWWhVZWQ5eTcrZHhJa2FWK0JWWEcwWUtOVkJpL3JjenZiZVQxcApRTldqd1cvcVNsODR2eVk5Z2hDMU42RVFjL05HbDJaQ2ZtcENBdHRjbHRkMDc4eVBkOExEbEtTWU1aVS9iQVBPClpBSjZmVVc5NDdZQmd6T1owdmNWSGQyRTlxSjRxSXNVWmNDWEo3SWtmUmNvN1RVNFZ2T2NQdGxuU1Z6akN4RFEKbHU0RkZ1OEVZQTkwQ1Q2anN2RE5kQy83cDdqd3hDWFMKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  ca.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBcHZkZDBINzVEaFhVTFdzbmR1eDdYdDNFbWRpSDgxMVEvbVJFMVZ0Qy9qZzFDT1RiCnY2SlhsaGE2OGNxWXNSeFcrbHIwbmczUi9rZHY2ZEpmSURyYTZkQ2NHNEdmQk9EOHhoaG5xZjNRbkRNUFd3d3EKc09ORUgwVTNxVkIwbU15WHZtalJOMk1jcXhmK2tFK1haQi9SanNrUllqMjRZdkY0SFEzRnd5NGxCNmU0ZjRvNAp4cHNBUmZTdWxuUXQ0WldWcHg2K3BWVDVjeVJtcm1CRUNNRWdHeld1d0hkQjJ6LzBVTDJETmZ5VEltZWRNaFlmCmFWdjZGUmY3bmU2YUZLblgraTU1V2ZFaCtCK1g5czNPblY1a3VQTVNrMFpBckdBbUU2Qmk0TzROQ05KeDhpeGsKSTIwdk9PT1NuRVlvUzNOWVhyVUJEckMzT3pxL0lRc2xkV01Yc3dJREFRQUJBb0lCQVFDS0UyVWt4K3hFeHE2Sgp4T1NGQjNuYThRRGx6VmhZWEtKZlRpSlNZcjliSnJaTkhaM1FzM3RGSnBVQTRlODJBRjY1ZVVCeitLL2hYY2hpCkVGUVVmamVOUnJQaVYyWmZEWVJjZWRBNGx5ck9FYmV3THJhYlE4YVJLWmVuVUY2c0FmMjNQRTFRUllsdXdGQUgKblpwdjlaUkNSV3MzMkJ6RXpqWHJxUGtUdVBSc2grUXJwcXhxQzM2dkRYWDhJd3BkTVpOK0wyanVZcElYRjBzZApranNqTUlNYVVIZENZOGRLQjdtN0hZVFVEcUw1dkJVbVllVm01OXhrWWFnM1l4bkhwcmFlRzE4NmtlN29uWSthClIxZTJxQ2VGbEZEL1RGMFUrdHU3Tld6alZBeGFTQ0xKcjVCUnU5LzdIdXlyR282MVdwT25kVHBoNWNHdzhjNzMKMHNHam1FS3hBb0dCQU00YnhvbVkwL3BiUXhvS1c0VmtlNFVuUXdXNWs3ajVLOC90VTVQOHdoUDBuQUJjTVFwWApYTlR4aDNQdEErTVFuWW5GdUUrcUwxVW8xSGI0d050dEluNFR6SXMrUVowVnNQWjBXU2RtWDZqSDlKZ1k5aEZYCllUa3BzZytJNi83bEhJb0xmNWZOSHlmdVVMWFhBOUE5NWpoS0FnZlhHRklXaDNJSTBxcHlTWHFyQW9HQkFNOWkKQWdzeTVlenpVRHFEckpkamN0OWo1Nis2M1R5RkRpa0JCeUVtTjlkdjcxRFRDNHcwTVN6SVg4ckwwZU9DNzU1dAo0eC9GL1RwdUpWVUVrL0VaRWZFL0tUTDl5UGpJV3kydmFObGpUOGQ5MnNWTXk3akQvbXFxM2QwWjhqYk9yaTJKCkw0YW5qc1A0elAycU9JRjZnSnVrbUwxcGlCVUFRWlFQOWVRYWtsY1pBb0dBY1p3ejR4TGYvZ2VpUkU5alJYTXUKOXlXK053Q2xZZmZQWTZ6aFBoaThiajJPWkZCdEk5TW1NNmJ6VUQ1Y3Z5UWdncG4vVDhKeWx0R0wxQXlvV2d1ZApVTHZmS3YzbE13NkszajhpQ2FyUG5meWlZZGlZZ3RTVW5lclM0T2RMbHRSNTE4b2d5ZTlpZGlOU1QvbTJlMm96ClplRzluczY4OURyQTdHWGFvZU9maDBNQ2dZRUFzN2F5SUxSTjdpWDRXNHpxRHhNZVpCbzJsK0d1Z1JpbzZiMjcKU08zT3JJS1MrQTY3emhjWW1qOVdTKzZQQjhMYkZnY1NNT0dwalc0UUtmbmFucTlrRGhUM0JmcEpvOVkwdFlWeApyaGxTOUlUTEJmbUQvYXpURityVWN4dGQvRUxsVEE2N1FjeUllcWxzTTFMRXZ1ZkM5WjRRd3V2bUFwVURQMlVKCmFFL2lpMWtDZ1lFQWtIUSt3K0pESitpYnFjU1dPVUNrL2o4THpZSXZUbXhsSFNBT2ZxdStrVjVsTXMrVjBOaUsKZUNCQ0RNYWZEKytlY0hDRzJBb3RyYjhEQmdsbWFOR3V5cHlyakNVa0dVenNMbUpBV1psNWN1SldtN1JWcjladgpzbWYxVGdqbWF0dHExY1FFcmlkOC9BTzJ3Y096dUNySXZjQ1VVWGRoYmhqZlpuTlVhNzZEZHNvPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
kind: Secret
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
  name: hubble-ca-secret
  namespace: kube-system
---
apiVersion: v1
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQVBQck9sRGlNNnhDWEJtVEFtR0g1ZTR3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TURRd05qQXhOVGcwT0ZvWERUSTJNRFF3TlRBeApOVGcwT0Zvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUFwdmRkMEg3NURoWFVMV3NuZHV4N1h0M0VtZGlIODExUS9tUkUxVnRDL2pnMUNPVGIKdjZKWGxoYTY4Y3FZc1J4VytscjBuZzNSL2tkdjZkSmZJRHJhNmRDY0c0R2ZCT0Q4eGhobnFmM1FuRE1QV3d3cQpzT05FSDBVM3FWQjBtTXlYdm1qUk4yTWNxeGYra0UrWFpCL1Jqc2tSWWoyNFl2RjRIUTNGd3k0bEI2ZTRmNG80Cnhwc0FSZlN1bG5RdDRaV1ZweDYrcFZUNWN5Um1ybUJFQ01FZ0d6V3V3SGRCMnovMFVMMkROZnlUSW1lZE1oWWYKYVZ2NkZSZjduZTZhRktuWCtpNTVXZkVoK0IrWDlzM09uVjVrdVBNU2swWkFyR0FtRTZCaTRPNE5DTkp4OGl4awpJMjB2T09PU25FWW9TM05ZWHJVQkRyQzNPenEvSVFzbGRXTVhzd0lEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGQm9TRlJqM0d0NGFORmhzTnZkR2NoZXZQYXhjTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQjVOTW9VR1Fxd3p0SStMZkV5NUdJVXBha0JXWmNYYURmQ3M4WVdTWmhSUHlvTTZ2ekdITVdFCmFOQ1lKK2JkTTJmZ2hvdU1jZE5GZUVZTklDV2hPYmxuRThFQy9YQk1VZXJFd0hRTVpqQUwxcy9TNkVqcVV3ek4KVHNUZU03OUppTmpJMElTOFFERU9HbDVjanZpWWhVZWQ5eTcrZHhJa2FWK0JWWEcwWUtOVkJpL3JjenZiZVQxcApRTldqd1cvcVNsODR2eVk5Z2hDMU42RVFjL05HbDJaQ2ZtcENBdHRjbHRkMDc4eVBkOExEbEtTWU1aVS9iQVBPClpBSjZmVVc5NDdZQmd6T1owdmNWSGQyRTlxSjRxSXNVWmNDWEo3SWtmUmNvN1RVNFZ2T2NQdGxuU1Z6akN4RFEKbHU0RkZ1OEVZQTkwQ1Q2anN2RE5kQy83cDdqd3hDWFMKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURTVENDQWpHZ0F3SUJBZ0lSQVAxZEg0S0M2YzJ6NktNNkYwM28rY2t3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TURRd05qQXhOVGcwT0ZvWERUSTJNRFF3TlRBeApOVGcwT0Zvd0l6RWhNQjhHQTFVRUF3d1lLaTVvZFdKaWJHVXRjbVZzWVhrdVkybHNhWFZ0TG1sdk1JSUJJakFOCkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXBvSzlkNGlGeDBxV3NzU1lyS0pxZkF1K1JlcmoKQkZjdlcyU2wzcjVCTUtpVGkzYmlEUlEvSHVtamNocU8vaE1Bczh6TkxiUDY5VVhCSForRUxRMmJQM0k3VnlaTwoxTGpnSVNiWTlGRDlkdjZWdk8yVUYzOTRySy84S2NzVkg3aG9ZbnpJV0hwcHNQRkhOVTdpSCtCN0hLOS9TdXZ5CkljZjl4SDlzZHlSNzdGNlJDSzJ6bjY2RjVYakc2VE55V3cwLzBMdGhaZFRjLzZ6MEZPV3J6VmRreW1XU1NFRWEKcmU3Z3RseEQ0K3MrR3lKTDlISmoxSnlOK2NNUjMyRUc0dGFNZUFzSmhDVVZtTWRpMHp6dlNGWWhydTFvbUF5ZQpDTFptalRUVlFoZHZxeUxSd0QwTkZva3lxandTbmM2MStQME9lcjR0UWJhZ05NZ3JKbnpyR2t0QjlRSURBUUFCCm80R0dNSUdETUE0R0ExVWREd0VCL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUIKQlFVSEF3SXdEQVlEVlIwVEFRSC9CQUl3QURBZkJnTlZIU01FR0RBV2dCUWFFaFVZOXhyZUdqUlliRGIzUm5JWApyejJzWERBakJnTlZIUkVFSERBYWdoZ3FMbWgxWW1Kc1pTMXlaV3hoZVM1amFXeHBkVzB1YVc4d0RRWUpLb1pJCmh2Y05BUUVMQlFBRGdnRUJBSVo0L3BRcGtRdzFEVUVRL0JEWXEzNGxxVU9LcUEwYWhGT0JKRDRwREhRdjlPSEYKc3poMWl4WHhQK2xyZDVOQzNSVnRSa2Jxbkgzd0Q1NjBES2d0Q0FxZ0FnRlRUdnRsclZialVldllIN3hnTDEraApLTUJQQTBxUVBJZk5xWUpIWEsvMFJrWDQ1Z2xtMjBUQ201em0wWGlOQmRqa2FGU20wTVFKZnRTYkdpakE1T2NoClFkdGhNWDJ0eVRoanJDTk8zUDJ0OUFDcVpLU3NPVUVpU255RGtkNjk1L2NPWGhHR0gzYWwyWHAraXJHOWRMSkgKRytJaTJSTC9VWEpxSnV2MXIyTWZFajhHRDhZaTJ3OWVESTU5dDlLS1ZXakJvV2I2VzBOZXJjaUYyaDh0UklYagpRTkx3UmNtRncyeU1CVVArbFhtMWRmd2l4ZmdyVmJxdUVYRDlsTEk9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBcG9LOWQ0aUZ4MHFXc3NTWXJLSnFmQXUrUmVyakJGY3ZXMlNsM3I1Qk1LaVRpM2JpCkRSUS9IdW1qY2hxTy9oTUFzOHpOTGJQNjlVWEJIWitFTFEyYlAzSTdWeVpPMUxqZ0lTYlk5RkQ5ZHY2VnZPMlUKRjM5NHJLLzhLY3NWSDdob1lueklXSHBwc1BGSE5VN2lIK0I3SEs5L1N1dnlJY2Y5eEg5c2R5Ujc3RjZSQ0syegpuNjZGNVhqRzZUTnlXdzAvMEx0aFpkVGMvNnowRk9XcnpWZGt5bVdTU0VFYXJlN2d0bHhENCtzK0d5Skw5SEpqCjFKeU4rY01SMzJFRzR0YU1lQXNKaENVVm1NZGkwenp2U0ZZaHJ1MW9tQXllQ0xabWpUVFZRaGR2cXlMUndEME4KRm9reXFqd1NuYzYxK1AwT2VyNHRRYmFnTk1nckpuenJHa3RCOVFJREFRQUJBb0lCQUcrdFVrd0FlZEV2V3FGdApzQVJoTGxBaVJDeDZuR1lGMzVKSmorSXo4bDhqUVVvUm93MG9uaWtxaEYvOEpobU1QelZZVCtpdVJNd0tTN3FGCmlVMzZTVHlsYmQxR3FTcU5FRzNMczBreHBMNFJnL1poMWFobzYxUE8rSzVETWRqRGd1ZERUOC9mMGxGRmtmL1QKOTE5djNNSmhobHVHb2pBOEJSeXNaZUFHelVLN0dTV0k0cXo2NXZhVUZSZkZQejVaT24yZm5iRTRTV0JibTUzQwpOUWwxTFFwSytKd0NWWmxrSWx4bFZ5SE11SnlqdHNaRjJDTmd1RkV3a1NETW5GSUs1RmpqcXF4S28rUjNDVks0CkhrbC9MeUhGbk4vQVRoVW5DaEVrWDN6ZlBXNFBSMDNVVXlTdXBzUGllcCt4NzVwZXE5Yks1d0dJMklBU1lYNWcKTWZnOVArRUNnWUVBeDBLc3doZ3VLK1ROZ21aR2wraHIvR0J5eXAvNjZKWG9qODRqcmZQVy9IWGt4WDlhLzlhcgp2WWJzNmdZYjl3OG4wRnZXTzhCc2t2ckFnbjhZZlY1NXVOZVY5MXFwcDVFTExCUW1TdmhwUDRLTUxGT3BSNHJlCmlDQW02Z0U4aCtFTTgxbDMyamMrUDhNRk5hb3F5NmVRWm1lZElsa3gzVmZRUzZnS1BCeGZpdGtDZ1lFQTFleTcKNktMNTdraEp4Z0dVclAraEs5S1ZMaXdiSEpvT0lCMUhmK0FkMTc0OWc2VTFkNEtsR0ZadzRyS3J6OXdKdnRYOApxbnhnVXBSK05lTFd1SjV1SWp5SVVRSzBCWnBSU2l2ZWYwTGpYbmR2M2lLaTJHRDc0bERDRmNNbUF3SjU5MUtDCm9vSmdLMTExMnFCNjRHN0d5S3R6QTBDNFg5N3FDWk1qR3ptaVpuMENnWUVBbXN6ZnJjSmZURlpxbWQyZkJqRFkKZzY3aVB5eGVId2NuTDJFME10WDJ0UmRaN1Z6dGMwaHhEOEtjbDRxN2V3cFpJZlBXMFlEQ1dNVlpmWWdEbkpJaQora2p5QnNKMmZ1bWR4bGE1RVJFL29zbG00S0QySjlCbzVWUWxKekppdGlWT2pGZDdWeG9IMEQxUDlNc0lpRUxiCldkTXhMaGdoTnhZYmlrczMrRThLb3JFQ2dZQmI3UWlxWlM1RktLY2JBUjdrWUV6ZnlmUDFEVnJ4SlhvZ2JyU0UKek1mR0o2ZkRaRURmaERKeGpPT2hadW5SdmxvcHVVYUQ5RUpuK2d0cUdIbndoNVFIL2o4Tm9MMi9FcHNQNWw0TQpEYkFxcmVSU2JrdlA4NDBKcVc1ZGI2aHI3cXAranVRMzlSSmlVQjBPdjV0TnlneDl1cjhIak00dDFGcDVsdEtsCkpsVVUrUUtCZ1FDR1Vmeit6MU03SURmZXI0NWZURTZ6Smdra2pFZ21aUEZyeWUzU2Rvak9yMkhUVHNyZ2JCZW4KVWxIUWxIQS9rWWNsNTJkYk1MVkllaUFQVmlCRlM2aDBYbnUyd0hIQThUS0Foa1NTdXBFclZ3OEFZTUdnN0hjawpkODEyWkNsQ1QyYlpkU0poNUxpK3cxY0lDY1Jmd3dQQjdkaDRQcllLZUcyWHl4dS9Ic3RVbGc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
kind: Secret
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
  name: hubble-relay-client-certs
  namespace: kube-system
type: kubernetes.io/tls
---
apiVersion: v1
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQVBQck9sRGlNNnhDWEJtVEFtR0g1ZTR3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TURRd05qQXhOVGcwT0ZvWERUSTJNRFF3TlRBeApOVGcwT0Zvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUFwdmRkMEg3NURoWFVMV3NuZHV4N1h0M0VtZGlIODExUS9tUkUxVnRDL2pnMUNPVGIKdjZKWGxoYTY4Y3FZc1J4VytscjBuZzNSL2tkdjZkSmZJRHJhNmRDY0c0R2ZCT0Q4eGhobnFmM1FuRE1QV3d3cQpzT05FSDBVM3FWQjBtTXlYdm1qUk4yTWNxeGYra0UrWFpCL1Jqc2tSWWoyNFl2RjRIUTNGd3k0bEI2ZTRmNG80Cnhwc0FSZlN1bG5RdDRaV1ZweDYrcFZUNWN5Um1ybUJFQ01FZ0d6V3V3SGRCMnovMFVMMkROZnlUSW1lZE1oWWYKYVZ2NkZSZjduZTZhRktuWCtpNTVXZkVoK0IrWDlzM09uVjVrdVBNU2swWkFyR0FtRTZCaTRPNE5DTkp4OGl4awpJMjB2T09PU25FWW9TM05ZWHJVQkRyQzNPenEvSVFzbGRXTVhzd0lEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGQm9TRlJqM0d0NGFORmhzTnZkR2NoZXZQYXhjTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQjVOTW9VR1Fxd3p0SStMZkV5NUdJVXBha0JXWmNYYURmQ3M4WVdTWmhSUHlvTTZ2ekdITVdFCmFOQ1lKK2JkTTJmZ2hvdU1jZE5GZUVZTklDV2hPYmxuRThFQy9YQk1VZXJFd0hRTVpqQUwxcy9TNkVqcVV3ek4KVHNUZU03OUppTmpJMElTOFFERU9HbDVjanZpWWhVZWQ5eTcrZHhJa2FWK0JWWEcwWUtOVkJpL3JjenZiZVQxcApRTldqd1cvcVNsODR2eVk5Z2hDMU42RVFjL05HbDJaQ2ZtcENBdHRjbHRkMDc4eVBkOExEbEtTWU1aVS9iQVBPClpBSjZmVVc5NDdZQmd6T1owdmNWSGQyRTlxSjRxSXNVWmNDWEo3SWtmUmNvN1RVNFZ2T2NQdGxuU1Z6akN4RFEKbHU0RkZ1OEVZQTkwQ1Q2anN2RE5kQy83cDdqd3hDWFMKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURaekNDQWsrZ0F3SUJBZ0lSQUsxajFyeTRyakxVM2s0WXh6ZDExSEl3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TURRd05qQXhOVGcwT0ZvWERUSTJNRFF3TlRBeApOVGcwT0Zvd01qRXdNQzRHQTFVRUF3d25LaTVyZFdKbGNtNWxkR1Z6TFdodmJXVXVhSFZpWW14bExXZHljR011ClkybHNhWFZ0TG1sdk1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBbFlKMHN1OVEKS202VjFjQlRpcCtITjZDQjA1dTdiZ1loQ2tPQjhlVi8vcUhMeXErVHVhTERKZklnMFZjUlhuQ3Z1MXhjdFhlMgpsOWx3eXlmY1k2L0ZtYkJ4WTdPTnU5YlJSNUVoRm9RYk9VbE1GL1RMYmF2T1NQdGd1U09tN1lMWmZKNG5PMlNICmE3M1VqM3JJSmlwbU5HcTJQS0sxbE13V3QyYlloYVdrTGtGWFdoeG1ScDZzVEVjV3Z0dkQvQnVCQy9YREpja3UKZDFBS3JwMU5TWXYzaDU4cE41aDBrOFd6dG40STJnSk1PU0JlQW9QK0JFbnpLaUo5QXdxci81R2JoU1IwYyt5VwpYZldPWm1lZkxTM2g1RERFYzQxN2szdkl6aVdpRXFoZGZIS3NEUytjUk42Y2pNY2MzVm9tQXFxdnVmV3prdVN0Ci91OURhbUZHUDgvRXpRSURBUUFCbzRHVk1JR1NNQTRHQTFVZER3RUIvd1FFQXdJRm9EQWRCZ05WSFNVRUZqQVUKQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFIL0JBSXdBREFmQmdOVkhTTUVHREFXZ0JRYQpFaFVZOXhyZUdqUlliRGIzUm5JWHJ6MnNYREF5QmdOVkhSRUVLekFwZ2ljcUxtdDFZbVZ5Ym1WMFpYTXRhRzl0ClpTNW9kV0ppYkdVdFozSndZeTVqYVd4cGRXMHVhVzh3RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUc1Tm1UWkwKT3dNZ3VnZXcwcHp0amxRajFoeU53TjFacUYwOGpoSC8yOWVveHV5UmI0SkorcGVMYmdxWWxoSUlTSlVXNXZ4agplZURJMGxUcjIxdGxTbVpFZ2h1SDhwT3VLRzV1YlF1cDZmcTQvQmM3YWxLNGYxZTFWaGpsRmM3eVBaWWhwZVdPClBLdE02YmpNYWlNY2xsU2RTRW5la1A4U2FhcXY0M25zWmJ1TDJ6cE9SYUN4YmttSEFEVjIzWERBYnEyTEJRQ0kKUGNGbzQzeUhTdHYvQWdWYi9OamJxSkFUTDlPcEpDdWNrMVQxdjRSckNwYmpxd0JIWGVhVUJCdGZEVUtuRlJEUAprZld4WUJiNUpYRzRzcGpRdkw0TUNCeXl5ZXBSejVzNHdocTNsZmlTOVdiVXJ4b3pRRDZlMHNmeFFMTDRRNkRJCnJxUC9Uc1BEV3cyZkQrTT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBbFlKMHN1OVFLbTZWMWNCVGlwK0hONkNCMDV1N2JnWWhDa09COGVWLy9xSEx5cStUCnVhTERKZklnMFZjUlhuQ3Z1MXhjdFhlMmw5bHd5eWZjWTYvRm1iQnhZN09OdTliUlI1RWhGb1FiT1VsTUYvVEwKYmF2T1NQdGd1U09tN1lMWmZKNG5PMlNIYTczVWozcklKaXBtTkdxMlBLSzFsTXdXdDJiWWhhV2tMa0ZYV2h4bQpScDZzVEVjV3Z0dkQvQnVCQy9YREpja3VkMUFLcnAxTlNZdjNoNThwTjVoMGs4V3p0bjRJMmdKTU9TQmVBb1ArCkJFbnpLaUo5QXdxci81R2JoU1IwYyt5V1hmV09abWVmTFMzaDVEREVjNDE3azN2SXppV2lFcWhkZkhLc0RTK2MKUk42Y2pNY2MzVm9tQXFxdnVmV3prdVN0L3U5RGFtRkdQOC9FelFJREFRQUJBb0lCQUJ0MXc0TmQ2d1p3R3pzUQpRUWZUOXh6amNSVHhwSUkzdy9mRG9HbFNjcWpOQk1Zc2EyQ01JWFdsdkJ0Vzk0eTErOERZM1BwRGk1am1TZzQyCk93ZGdNRlhqRDJCMWlSRzRDZVl3SkxpaStQRVRvbE5BRmVFRnpqU2ZYd3VDSGRXLzA3eE11LzN2bitQTkVPNXQKYWJlQTBCYk9ocndxVWxtTEJwMFcyYXZxV1haWktCaTJOU0dUWWhJMlJMcFh4aWp1ZzFYZTNWVDY5aFArL2NmKwpMYi9EK3FLOHF4NEVNMmR5enNiTzYvOTZhbUtxd01WYnU2bHdrT3hTQVdUTjBsMFUxWGdwYXI0OXZxN2xrU3dwCkJacCtnUElTS3E4TEljcXN4R0lwMzZsRFBrSkdnc2NDVHAxV1VZa1krQ05qaEtDM09adWdiWDl6K2Q1b2RzRWUKM3hhTXJlMENnWUVBeFY0czlrMkZ3bmxBWkxWeHpML0FjK3VidzY1b0x6MVIydDFUcGhQZWZXU0VRelNuS0ozbApKZnJwQkx5RWZIVndKNTVlMW5UZUs5Y0RmMUQ4enF5cWloNDIxZ1Era1pTSVJoeGtTbHVOS0xXTWdDTDc0THRvCmVXT2F2UUplTTNHNUxGNGR5YkN1NnJnYUNpalFWY0gxNktVTzlqUEtRZGJsaGFhSjJLR0JEWmNDZ1lFQXdleW8KbVF1eUYxNEE5Rll1Q3paaTZpZHQ4VmtMZW1PWFZ6U3NQQlhObFRlTzVWdmdxQWs1Nys4a1BMNGpxUk9jRUFXVAo5WWpvZ1p5RWdoSHlKaXNBQmt6bUhRZDZoL1BrclpmZXdYeHl1NjM0SnZDQmwvK095aUh6UW1lbzRUWEdnM1ZlClR6Y3BuV0l6eHkwQmw5aC9UYnNoSGZqaFdxLzVkODJNTGEyMTFUc0NnWUVBa21Lbk5vZUpEaFNnamhHRnRqY0MKcHZlNU1BbkxmRDRlMkJZUVZMMm41NWtHQUZLdEtKTHp3cGUyL0t4V0YzbURGZCtBdDg4MmVZMmdLbTRIRThNOQpPZlB1K0ExdDJzd3Z4dENJRWg2Vk0veHptUlpaZXZXRko0T1k0VmRBUnlleUVCWStRYm1xQXExSm92OWloamkyCkN6ZGhRWHBvS1MwYVQyYVdGdmF5b1VFQ2dZQk82cTRaeWlhcFY3bnZ0UHA3MmFBYlJmeDUwUkRZdDVxcEJHaHEKOHp4OFV1VzE5TlBSemg5and0L3VVRHBXM2dJT2l4YVJQeXZQUXhDeGxmZ0RERkN3UDY4TmRUT3FDOWl0eERZRQphMDZOamRpRWtDOU0yZFVUOFFqN3B3K1V4cnVJVjhVUFc1VjExTGJaZ1RrNndBSGVjaDZpQWR4RGVZVjkrWW5vCk5ON2diUUtCZ1FDVEtRam4ya2dobStINWNsSDJEbkFHT0JLU3F3N01yYUZMMmdNRVZ0L3Z0aXlSVGN3SVlyNkgKbHB2cnJqS0tFdXkyMVBGUzcwT3lPKzdxR3lsVEVOK0Iyd2xXYkN1VDE5SVcxdjA3U0ZOSFMvd09KWVdkK2tnNgorYmtoSzdRR1NIWmtZTmVsdVkwTklNWWRBdzRFVm5ONXRSREkzV0NlV2tYWSs4K0lIUy9QM0E9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
kind: Secret
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
  name: hubble-server-certs
  namespace: kube-system
type: kubernetes.io/tls
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
    prometheus.io/port: "9964"
    prometheus.io/scrape: "true"
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cilium-agent
    app.kubernetes.io/part-of: cilium
    k8s-app: cilium
  name: cilium-agent
  namespace: kube-system
spec:
  clusterIP: None
  ports:
  - name: envoy-metrics
    port: 9964
    protocol: TCP
    targetPort: envoy-metrics
  selector:
    app.kubernetes.io/managed-by: Helm
    k8s-app: cilium
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
    prometheus.io/port: "9965"
    prometheus.io/scrape: "true"
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: hubble
    app.kubernetes.io/part-of: cilium
    k8s-app: hubble
  name: hubble-metrics
  namespace: kube-system
spec:
  clusterIP: None
  ports:
  - name: hubble-metrics
    port: 9965
    protocol: TCP
    targetPort: hubble-metrics
  selector:
    app.kubernetes.io/managed-by: Helm
    k8s-app: cilium
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: hubble-peer
    app.kubernetes.io/part-of: cilium
    k8s-app: cilium
  name: hubble-peer
  namespace: kube-system
spec:
  internalTrafficPolicy: Local
  ports:
  - name: peer-service
    port: 443
    protocol: TCP
    targetPort: 4244
  selector:
    app.kubernetes.io/managed-by: Helm
    k8s-app: cilium
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
    k8s-app: hubble-relay
  name: hubble-relay
  namespace: kube-system
spec:
  ports:
  - port: 80
    protocol: TCP
    targetPort: 4245
  selector:
    app.kubernetes.io/managed-by: Helm
    k8s-app: hubble-relay
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
    k8s-app: hubble-relay
  name: hubble-relay-metrics
  namespace: kube-system
spec:
  clusterIP: None
  ports:
  - name: metrics
    port: 9966
    protocol: TCP
    targetPort: prometheus
  selector:
    app.kubernetes.io/managed-by: Helm
    k8s-app: hubble-relay
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
    k8s-app: hubble-ui
  name: hubble-ui
  namespace: kube-system
spec:
  ports:
  - name: http
    port: 80
    targetPort: 8081
  selector:
    app.kubernetes.io/managed-by: Helm
    k8s-app: hubble-ui
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cilium-operator
    app.kubernetes.io/part-of: cilium
    io.cilium/app: operator
    name: cilium-operator
  name: cilium-operator
  namespace: kube-system
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/managed-by: Helm
      io.cilium/app: operator
      name: cilium-operator
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
        cilium.io/cilium-configmap-checksum: e0fa1adad6c4c0cfe9dd4bef9677d3092f0fe65c70f67d47d5e80d2340b496f6
        meta.helm.sh/release-name: cilium
        meta.helm.sh/release-namespace: kube-system
        prometheus.io/port: "9963"
        prometheus.io/scrape: "true"
      labels:
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: cilium-operator
        app.kubernetes.io/part-of: cilium
        io.cilium/app: operator
        name: cilium-operator
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app.kubernetes.io/managed-by: Helm
                io.cilium/app: operator
            topologyKey: kubernetes.io/hostname
      automountServiceAccountToken: true
      containers:
      - args:
        - --config-dir=/tmp/cilium/config-map
        - --debug=$(CILIUM_DEBUG)
        command:
        - cilium-operator-generic
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_DEBUG
          valueFrom:
            configMapKeyRef:
              key: debug
              name: cilium-config
              optional: true
        - name: KUBERNETES_SERVICE_HOST
          value: 10.11.0.254
        - name: KUBERNETES_SERVICE_PORT
          value: "6443"
        image: quay.io/cilium/operator-generic:v1.13.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            host: 127.0.0.1
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 3
        name: cilium-operator
        ports:
        - containerPort: 9963
          hostPort: 9963
          name: prometheus
          protocol: TCP
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /tmp/cilium/config-map
          name: cilium-config-path
          readOnly: true
      hostNetwork: true
      nodeSelector:
        kubernetes.io/os: linux
      priorityClassName: system-cluster-critical
      restartPolicy: Always
      serviceAccount: cilium-operator
      serviceAccountName: cilium-operator
      tolerations:
      - operator: Exists
      volumes:
      - configMap:
          name: cilium-config
        name: cilium-config-path
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
    k8s-app: hubble-relay
  name: hubble-relay
  namespace: kube-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/managed-by: Helm
      k8s-app: hubble-relay
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
        cilium.io/hubble-relay-configmap-checksum: f6f343cd25b567b6a4ebcc370e2a15b4619ec1216170ffdd401cd5a9338f6caa
        meta.helm.sh/release-name: cilium
        meta.helm.sh/release-namespace: kube-system
      labels:
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: hubble-relay
        app.kubernetes.io/part-of: cilium
        k8s-app: hubble-relay
    spec:
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app.kubernetes.io/managed-by: Helm
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
      automountServiceAccountToken: false
      containers:
      - args:
        - serve
        command:
        - hubble-relay
        image: quay.io/cilium/hubble-relay:v1.13.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          tcpSocket:
            port: grpc
        name: hubble-relay
        ports:
        - containerPort: 4245
          name: grpc
        - containerPort: 9966
          name: prometheus
          protocol: TCP
        readinessProbe:
          tcpSocket:
            port: grpc
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /etc/hubble-relay
          name: config
          readOnly: true
        - mountPath: /var/lib/hubble-relay/tls
          name: tls
          readOnly: true
      nodeSelector:
        kubernetes.io/os: linux
      priorityClassName: null
      restartPolicy: Always
      serviceAccount: hubble-relay
      serviceAccountName: hubble-relay
      terminationGracePeriodSeconds: 1
      volumes:
      - configMap:
          items:
          - key: config.yaml
            path: config.yaml
          name: hubble-relay-config
        name: config
      - name: tls
        projected:
          defaultMode: 256
          sources:
          - secret:
              items:
              - key: ca.crt
                path: hubble-server-ca.crt
              - key: tls.crt
                path: client.crt
              - key: tls.key
                path: client.key
              name: hubble-relay-client-certs
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
    k8s-app: hubble-ui
  name: hubble-ui
  namespace: kube-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/managed-by: Helm
      k8s-app: hubble-ui
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
        cilium.io/hubble-ui-nginx-configmap-checksum: c7f0d2cfca5909a7fbb6128aee6bcf1f73a8c7577509a0b548ca3b4ace2b1888
        meta.helm.sh/release-name: cilium
        meta.helm.sh/release-namespace: kube-system
      labels:
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: hubble-ui
        app.kubernetes.io/part-of: cilium
        k8s-app: hubble-ui
    spec:
      automountServiceAccountToken: true
      containers:
      - image: quay.io/cilium/hubble-ui:v0.10.0@sha256:118ad2fcfd07fabcae4dde35ec88d33564c9ca7abe520aa45b1eb13ba36c6e0a
        imagePullPolicy: IfNotPresent
        name: frontend
        ports:
        - containerPort: 8081
          name: http
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /etc/nginx/conf.d/default.conf
          name: hubble-ui-nginx-conf
          subPath: nginx.conf
        - mountPath: /tmp
          name: tmp-dir
      - env:
        - name: EVENTS_SERVER_PORT
          value: "8090"
        - name: FLOWS_API_ADDR
          value: hubble-relay:80
        image: quay.io/cilium/hubble-ui-backend:v0.10.0@sha256:cc5e2730b3be6f117b22176e25875f2308834ced7c3aa34fb598aa87a2c0a6a4
        imagePullPolicy: IfNotPresent
        name: backend
        ports:
        - containerPort: 8090
          name: grpc
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts: null
      nodeSelector:
        kubernetes.io/os: linux
      priorityClassName: null
      securityContext:
        fsGroup: 1001
        runAsGroup: 1001
        runAsUser: 1001
      serviceAccount: hubble-ui
      serviceAccountName: hubble-ui
      volumes:
      - configMap:
          defaultMode: 420
          name: hubble-ui-nginx
        name: hubble-ui-nginx-conf
      - emptyDir: {}
        name: tmp-dir
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cilium-agent
    app.kubernetes.io/part-of: cilium
    k8s-app: cilium
  name: cilium
  namespace: kube-system
spec:
  selector:
    matchLabels:
      app.kubernetes.io/managed-by: Helm
      k8s-app: cilium
  template:
    metadata:
      annotations:
        container.apparmor.security.beta.kubernetes.io/cilium-agent: unconfined
        container.apparmor.security.beta.kubernetes.io/clean-cilium-state: unconfined
        meta.helm.sh/release-name: cilium
        meta.helm.sh/release-namespace: kube-system
        prometheus.io/port: "9962"
        prometheus.io/scrape: "true"
      labels:
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: cilium-agent
        app.kubernetes.io/part-of: cilium
        k8s-app: cilium
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
      automountServiceAccountToken: true
      containers:
      - args:
        - --config-dir=/tmp/cilium/config-map
        command:
        - cilium-agent
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_CLUSTERMESH_CONFIG
          value: /var/lib/cilium/clustermesh/
        - name: CILIUM_CNI_CHAINING_MODE
          valueFrom:
            configMapKeyRef:
              key: cni-chaining-mode
              name: cilium-config
              optional: true
        - name: CILIUM_CUSTOM_CNI_CONF
          valueFrom:
            configMapKeyRef:
              key: custom-cni-conf
              name: cilium-config
              optional: true
        - name: KUBERNETES_SERVICE_HOST
          value: 10.11.0.254
        - name: KUBERNETES_SERVICE_PORT
          value: "6443"
        image: quay.io/cilium/cilium:v1.13.1
        imagePullPolicy: IfNotPresent
        lifecycle:
          postStart:
            exec:
              command:
              - /cni-install.sh
              - --enable-debug=false
              - --cni-exclusive=true
              - --log-file=/var/run/cilium/cilium-cni.log
          preStop:
            exec:
              command:
              - /cni-uninstall.sh
        livenessProbe:
          failureThreshold: 10
          httpGet:
            host: 127.0.0.1
            httpHeaders:
            - name: brief
              value: "true"
            path: /healthz
            port: 9879
            scheme: HTTP
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 5
        name: cilium-agent
        ports:
        - containerPort: 4244
          hostPort: 4244
          name: peer-service
          protocol: TCP
        - containerPort: 9962
          hostPort: 9962
          name: prometheus
          protocol: TCP
        - containerPort: 9964
          hostPort: 9964
          name: envoy-metrics
          protocol: TCP
        - containerPort: 9965
          hostPort: 9965
          name: hubble-metrics
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            host: 127.0.0.1
            httpHeaders:
            - name: brief
              value: "true"
            path: /healthz
            port: 9879
            scheme: HTTP
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 5
        securityContext:
          capabilities:
            add:
            - CHOWN
            - KILL
            - NET_ADMIN
            - NET_RAW
            - IPC_LOCK
            - SYS_ADMIN
            - SYS_RESOURCE
            - DAC_OVERRIDE
            - FOWNER
            - SETGID
            - SETUID
            drop:
            - ALL
          seLinuxOptions:
            level: s0
            type: spc_t
        startupProbe:
          failureThreshold: 105
          httpGet:
            host: 127.0.0.1
            httpHeaders:
            - name: brief
              value: "true"
            path: /healthz
            port: 9879
            scheme: HTTP
          periodSeconds: 2
          successThreshold: 1
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /host/proc/sys/net
          name: host-proc-sys-net
        - mountPath: /host/proc/sys/kernel
          name: host-proc-sys-kernel
        - mountPath: /sys/fs/bpf
          mountPropagation: HostToContainer
          name: bpf-maps
        - mountPath: /sys/fs/cgroup
          name: cilium-cgroup
        - mountPath: /var/run/cilium
          name: cilium-run
        - mountPath: /host/etc/cni/net.d
          name: etc-cni-netd
        - mountPath: /var/lib/cilium/clustermesh
          name: clustermesh-secrets
          readOnly: true
        - mountPath: /lib/modules
          name: lib-modules
          readOnly: true
        - mountPath: /run/xtables.lock
          name: xtables-lock
        - mountPath: /var/lib/cilium/tls/hubble
          name: hubble-tls
          readOnly: true
        - mountPath: /tmp
          name: tmp
      hostNetwork: true
      initContainers:
      - command:
        - cilium
        - build-config
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: KUBERNETES_SERVICE_HOST
          value: 10.11.0.254
        - name: KUBERNETES_SERVICE_PORT
          value: "6443"
        image: quay.io/cilium/cilium:v1.13.1
        imagePullPolicy: IfNotPresent
        name: config
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /tmp
          name: tmp
      - args:
        - mount | grep "/sys/fs/bpf type bpf" || mount -t bpf bpf /sys/fs/bpf
        command:
        - /bin/bash
        - -c
        - --
        image: quay.io/cilium/cilium:v1.13.1
        imagePullPolicy: IfNotPresent
        name: mount-bpf-fs
        securityContext:
          privileged: true
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /sys/fs/bpf
          mountPropagation: Bidirectional
          name: bpf-maps
      - command:
        - /init-container.sh
        env:
        - name: CILIUM_ALL_STATE
          valueFrom:
            configMapKeyRef:
              key: clean-cilium-state
              name: cilium-config
              optional: true
        - name: CILIUM_BPF_STATE
          valueFrom:
            configMapKeyRef:
              key: clean-cilium-bpf-state
              name: cilium-config
              optional: true
        - name: KUBERNETES_SERVICE_HOST
          value: 10.11.0.254
        - name: KUBERNETES_SERVICE_PORT
          value: "6443"
        image: quay.io/cilium/cilium:v1.13.1
        imagePullPolicy: IfNotPresent
        name: clean-cilium-state
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        securityContext:
          capabilities:
            add:
            - NET_ADMIN
            - SYS_ADMIN
            - SYS_RESOURCE
            drop:
            - ALL
          seLinuxOptions:
            level: s0
            type: spc_t
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /sys/fs/bpf
          name: bpf-maps
        - mountPath: /sys/fs/cgroup
          mountPropagation: HostToContainer
          name: cilium-cgroup
        - mountPath: /var/run/cilium
          name: cilium-run
      - command:
        - /install-plugin.sh
        image: quay.io/cilium/cilium:v1.13.1
        imagePullPolicy: IfNotPresent
        name: install-cni-binaries
        resources:
          requests:
            cpu: 100m
            memory: 10Mi
        securityContext:
          capabilities:
            drop:
            - ALL
          seLinuxOptions:
            level: s0
            type: spc_t
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /host/opt/cni/bin
          name: cni-path
      nodeSelector:
        kubernetes.io/os: linux
      priorityClassName: system-node-critical
      restartPolicy: Always
      serviceAccount: cilium
      serviceAccountName: cilium
      terminationGracePeriodSeconds: 1
      tolerations:
      - operator: Exists
      volumes:
      - emptyDir: {}
        name: tmp
      - hostPath:
          path: /var/run/cilium
          type: DirectoryOrCreate
        name: cilium-run
      - hostPath:
          path: /sys/fs/bpf
          type: DirectoryOrCreate
        name: bpf-maps
      - hostPath:
          path: /sys/fs/cgroup
          type: DirectoryOrCreate
        name: cilium-cgroup
      - hostPath:
          path: /opt/cni/bin
          type: DirectoryOrCreate
        name: cni-path
      - hostPath:
          path: /etc/cni/net.d
          type: DirectoryOrCreate
        name: etc-cni-netd
      - hostPath:
          path: /lib/modules
        name: lib-modules
      - hostPath:
          path: /run/xtables.lock
          type: FileOrCreate
        name: xtables-lock
      - name: clustermesh-secrets
        secret:
          defaultMode: 256
          optional: true
          secretName: cilium-clustermesh
      - hostPath:
          path: /proc/sys/net
          type: Directory
        name: host-proc-sys-net
      - hostPath:
          path: /proc/sys/kernel
          type: Directory
        name: host-proc-sys-kernel
      - name: hubble-tls
        projected:
          defaultMode: 256
          sources:
          - secret:
              items:
              - key: ca.crt
                path: client-ca.crt
              - key: tls.crt
                path: server.crt
              - key: tls.key
                path: server.key
              name: hubble-server-certs
              optional: true
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 2
    type: RollingUpdate
